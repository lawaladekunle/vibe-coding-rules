# C++ Backend Development Guide for AI Assistant

## Project Overview
- **Stack**: C++-based backend development
- **Purpose**: Standardize AI-assisted code generation for C++ backend applications

## Coding Standards

### C++ Style
- Follow the Google C++ Style Guide
- Use 2 spaces for indentation
- Use snake_case for variables and functions
- Use PascalCase for class names
- Use UPPER_SNAKE_CASE for constants
- Limit line length to 100 characters
- Always use braces for control structures
- Use descriptive, meaningful names for variables, functions, and classes
- Use nullptr instead of NULL
- Use auto when type is obvious
- Use constexpr for compile-time constants
- Use override keyword for virtual function overrides

### Project Structure
```
src/
├── include/              # Header files
│   └── project/
│       ├── api/         # API interfaces
│       ├── config/      # Configuration
│       ├── core/        # Core functionality
│       ├── database/    # Database interfaces
│       ├── models/      # Data models
│       ├── services/    # Business logic
│       └── utils/       # Utility functions
├── src/                 # Implementation files
│   └── project/
│       ├── api/         # API implementations
│       ├── config/      # Configuration
│       ├── core/        # Core implementations
│       ├── database/    # Database implementations
│       ├── models/      # Model implementations
│       ├── services/    # Service implementations
│       └── utils/       # Utility implementations
├── tests/               # Test files
│   ├── unit/           # Unit tests
│   └── integration/    # Integration tests
├── third_party/        # Third-party dependencies
├── CMakeLists.txt      # Main CMake file
└── README.md           # Project documentation
```

### Best Practices
- Follow RAII principles
- Use smart pointers (unique_ptr, shared_ptr) instead of raw pointers
- Use references instead of pointers when possible
- Implement proper exception handling
- Use const correctness
- Use move semantics for performance
- Use std::string_view for string parameters
- Use std::optional for nullable values
- Use std::variant for type-safe unions
- Use std::chrono for time operations
- Use std::filesystem for file operations
- Use std::format for string formatting (C++20)

### C++ Version
- Use C++20 for modern features
- Enable all warnings (-Wall -Wextra)
- Use concepts for template constraints
- Use ranges for collection operations
- Use coroutines for asynchronous operations
- Use modules for better code organization (C++20)

### Database Interaction
- Use SQLite, PostgreSQL, or MongoDB
- Implement proper connection pooling
- Use prepared statements
- Implement proper transaction management
- Use connection pooling
- Apply database indexing
- Use ORM libraries when appropriate

### API Development
- Use RESTful API design principles
- Use gRPC for high-performance RPC
- Implement proper input validation
- Use appropriate HTTP status codes
- Implement API versioning
- Document APIs with OpenAPI/Swagger
- Use consistent response formats
- Implement pagination for list endpoints

### Authentication & Security
- Use JWT or OAuth2 for authentication
- Implement proper password hashing
- Use HTTPS in production
- Implement role-based access control
- Validate all inputs
- Protect against common vulnerabilities
- Follow OWASP security guidelines
- Use secure random number generation

### Testing
- Use Google Test for unit testing
- Use Google Mock for mocking
- Implement integration tests
- Use TestContainers for database testing
- Apply TDD approach
- Maintain high test coverage
- Use property-based testing
- Implement CI/CD pipeline

### Logging & Monitoring
- Use spdlog or glog for logging
- Implement structured logging
- Use context for request tracing
- Create health check endpoints
- Implement metrics collection
- Set up proper logging levels
- Use tracing libraries

### Build & Deployment
- Use CMake for build management
- Implement Docker containerization
- Use appropriate compiler flags
- Implement environment-specific configurations
- Use continuous deployment practices
- Implement circuit breakers
- Use static analysis tools
- Use sanitizers for debugging

### Performance
- Use profiling tools
- Implement proper memory management
- Use move semantics
- Implement caching strategies
- Use async operations where appropriate
- Optimize critical paths
- Use SIMD instructions when beneficial
- Implement proper thread management 