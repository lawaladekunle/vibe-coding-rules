# Node.js Backend Development Guide for AI Assistant

## Project Overview
- **Stack**: Node.js-based backend development
- **Purpose**: Standardize AI-assisted code generation for Node.js backend applications

## Coding Standards

### Node.js Style
- Follow Node.js Style Guide
- Use 2 spaces for indentation
- Use camelCase for variables and methods
- Use PascalCase for classes
- Use UPPER_SNAKE_CASE for constants
- Limit line length to 100 characters
- Use descriptive, meaningful names for variables, methods, and classes
- Use TypeScript for type safety
- Use interfaces for type definitions
- Use enums for constant values
- Use readonly for immutable properties
- Use async/await for asynchronous operations
- Use proper error handling

### Project Structure
```
src/
├── config/           # Configuration files
├── src/             # Source code
│   ├── controllers/ # Route controllers
│   ├── models/      # Data models
│   ├── services/    # Business logic
│   ├── repositories/# Data access
│   ├── middleware/  # Express middleware
│   ├── routes/      # Route definitions
│   ├── utils/       # Utility functions
│   └── types/       # TypeScript types
├── tests/           # Test files
├── public/          # Static assets
├── dist/            # Compiled code
├── node_modules/    # Dependencies
├── package.json     # Project configuration
└── tsconfig.json    # TypeScript configuration
```

### Best Practices
- Follow Node.js best practices
- Use dependency injection
- Implement proper error handling
- Use async/await for asynchronous operations
- Use proper form validation
- Implement proper state management
- Use proper routing system
- Follow component composition patterns
- Use proper lifecycle hooks
- Implement proper prop validation
- Use proper logging
- Implement proper caching

### Node.js Version
- Use Node.js 20+ for new projects
- Use TypeScript for type safety
- Use ES modules (import/export)
- Use top-level await
- Use private class fields
- Use class static blocks
- Use array.at()
- Use Object.hasOwn()

### Database Interaction
- Use TypeORM/Prisma for ORM
- Use proper connection pooling
- Implement proper transaction management
- Use proper database indexing
- Implement proper migrations
- Use proper database backups
- Use proper query optimization
- Implement proper caching

### API Development
- Follow RESTful API design principles
- Use proper HTTP status codes
- Implement proper API versioning
- Document APIs with OpenAPI/Swagger
- Use proper response formats
- Implement proper pagination
- Use proper rate limiting
- Implement proper API security

### Authentication & Security
- Use JWT for authentication
- Implement proper session management
- Use proper CSRF protection
- Implement proper XSS protection
- Use proper input validation
- Implement proper output encoding
- Use proper security headers
- Follow OWASP security guidelines

### Testing
- Use Jest for unit testing
- Use Supertest for API testing
- Use TypeScript for type checking
- Implement proper integration tests
- Use proper test fixtures
- Implement proper mocking
- Use proper test coverage
- Implement proper CI/CD pipeline

### Performance
- Use proper caching strategies
- Implement proper lazy loading
- Use proper database optimization
- Implement proper code optimization
- Use proper memory management
- Implement proper load balancing
- Use proper CDN integration
- Implement proper monitoring

### Build & Deployment
- Use npm/yarn for dependency management
- Implement proper environment configurations
- Use proper build optimization
- Implement proper deployment strategies
- Use proper CI/CD pipeline
- Implement proper versioning
- Use proper monitoring
- Implement proper error tracking

### Logging & Monitoring
- Use Winston/Pino for logging
- Implement proper log rotation
- Use proper log aggregation
- Implement proper error tracking
- Use proper performance monitoring
- Implement proper health checks
- Use proper metrics collection
- Implement proper alerting 