# Svelte Frontend Development Guide for AI Assistant

## Project Overview
- **Stack**: Svelte-based frontend development
- **Purpose**: Standardize AI-assisted code generation for Svelte frontend applications

## Coding Standards

### Svelte Style
- Follow Svelte Style Guide
- Use 2 spaces for indentation
- Use camelCase for variables and methods
- Use PascalCase for components
- Use UPPER_SNAKE_CASE for constants
- Limit line length to 100 characters
- Use descriptive, meaningful names for components and variables
- Follow Svelte naming conventions for files and folders
- Use TypeScript for type safety
- Use interfaces for type definitions
- Use enums for constant values
- Use readonly for immutable properties

### Project Structure
```
src/
├── lib/              # Reusable components and utilities
│   ├── components/   # Shared components
│   ├── stores/       # Svelte stores
│   └── utils/        # Utility functions
├── routes/           # Page components
├── app.html          # HTML template
├── app.d.ts          # TypeScript declarations
├── app.css           # Global styles
└── main.ts           # Application entry point
```

### Best Practices
- Follow Svelte best practices and patterns
- Use reactive statements effectively
- Implement proper error handling
- Use async/await for asynchronous operations
- Use Svelte's reactivity system effectively
- Implement proper form validation
- Use bind:value for form bindings
- Implement proper state management
- Use SvelteKit for routing
- Follow component composition patterns
- Use proper lifecycle functions
- Implement proper prop validation

### Svelte Version
- Use latest Svelte version
- Use SvelteKit for new projects
- Use TypeScript for type safety
- Use stores for state management
- Use actions for DOM events
- Use transitions for animations
- Use slots for component composition
- Use context for dependency injection

### Component Development
- Follow single responsibility principle
- Use presentational and container components
- Implement proper component communication
- Use proper lifecycle functions
- Implement proper error boundaries
- Use proper component styling
- Implement proper accessibility
- Use proper component testing

### State Management
- Use Svelte stores for state management
- Implement proper store architecture
- Use proper store subscriptions
- Implement proper store updates
- Use proper store derived values
- Implement proper store persistence
- Use proper store middleware
- Implement proper store validation

### Routing
- Use SvelteKit for routing
- Implement proper route guards
- Use proper route parameters
- Implement proper route loading
- Use proper route layouts
- Implement proper route transitions
- Use proper route data loading
- Implement proper route error handling

### Testing
- Use Vitest for unit testing
- Use @testing-library/svelte for component testing
- Use Cypress for E2E testing
- Implement proper component testing
- Use proper store testing
- Implement proper route testing
- Use proper integration testing
- Implement proper performance testing

### Performance
- Implement proper lazy loading
- Use proper component caching
- Implement proper bundle optimization
- Use proper image optimization
- Implement proper caching strategies
- Use proper code splitting
- Implement proper tree shaking
- Use proper performance monitoring

### Security
- Implement proper XSS protection
- Use proper CSRF protection
- Implement proper authentication
- Use proper authorization
- Implement proper input validation
- Use proper output encoding
- Implement proper security headers
- Use proper security best practices

### Build & Deployment
- Use Vite for development
- Implement proper environment configurations
- Use proper build optimization
- Implement proper deployment strategies
- Use proper CI/CD pipeline
- Implement proper versioning
- Use proper monitoring
- Implement proper error tracking

### Accessibility
- Follow WCAG guidelines
- Implement proper ARIA attributes
- Use proper semantic HTML
- Implement proper keyboard navigation
- Use proper color contrast
- Implement proper screen reader support
- Use proper focus management
- Implement proper accessibility testing 