# Angular Frontend Development Guide for AI Assistant

## Project Overview
- **Stack**: Angular-based frontend development
- **Purpose**: Standardize AI-assisted code generation for Angular frontend applications

## Coding Standards

### Angular Style
- Follow Angular Style Guide
- Use 2 spaces for indentation
- Use camelCase for variables and methods
- Use PascalCase for components, services, and interfaces
- Use UPPER_SNAKE_CASE for constants
- Limit line length to 100 characters
- Use descriptive, meaningful names for components, services, and variables
- Follow Angular naming conventions for files and folders
- Use TypeScript strict mode
- Use interfaces for type definitions
- Use enums for constant values
- Use readonly for immutable properties

### Project Structure
```
src/
├── app/
│   ├── core/           # Singleton services, guards, interceptors
│   ├── features/       # Feature modules
│   │   └── feature-name/
│   │       ├── components/
│   │       ├── services/
│   │       ├── models/
│   │       └── feature-name.module.ts
│   ├── shared/         # Shared components, directives, pipes
│   │   ├── components/
│   │   ├── directives/
│   │   ├── pipes/
│   │   └── shared.module.ts
│   ├── layout/         # Layout components
│   └── app.module.ts
├── assets/            # Static assets
├── environments/      # Environment configurations
└── styles/           # Global styles
```

### Best Practices
- Follow Angular best practices and patterns
- Use dependency injection
- Implement proper error handling
- Use async/await for asynchronous operations
- Use RxJS operators effectively
- Implement proper form validation
- Use reactive forms for complex forms
- Use template-driven forms for simple forms
- Implement proper state management
- Use Angular Material for UI components
- Follow component composition patterns
- Use proper lifecycle hooks
- Implement proper change detection strategies

### Angular Version
- Use latest stable Angular version
- Use standalone components (Angular 14+)
- Use control flow syntax (Angular 17+)
- Use signals for state management (Angular 16+)
- Use built-in control flow (Angular 17+)
- Use dependency injection with inject function
- Use functional guards and resolvers

### Component Development
- Follow single responsibility principle
- Use presentational and container components
- Implement proper component communication
- Use proper component lifecycle hooks
- Implement proper error boundaries
- Use proper component styling
- Implement proper accessibility
- Use proper component testing

### State Management
- Use NgRx for complex state management
- Use signals for simple state management
- Implement proper store architecture
- Use proper selectors
- Implement proper effects
- Use proper actions
- Implement proper reducers
- Use proper state persistence

### Routing
- Implement proper route guards
- Use proper route resolvers
- Implement proper lazy loading
- Use proper route parameters
- Implement proper route animations
- Use proper route data
- Implement proper route events
- Use proper route strategies

### Testing
- Use Jasmine for unit testing
- Use Karma for test running
- Use Cypress for E2E testing
- Implement proper component testing
- Use proper service testing
- Implement proper pipe testing
- Use proper directive testing
- Implement proper integration testing

### Performance
- Implement proper lazy loading
- Use proper change detection strategies
- Implement proper bundle optimization
- Use proper image optimization
- Implement proper caching strategies
- Use proper code splitting
- Implement proper tree shaking
- Use proper performance monitoring

### Security
- Implement proper XSS protection
- Use proper CSRF protection
- Implement proper authentication
- Use proper authorization
- Implement proper input validation
- Use proper output encoding
- Implement proper security headers
- Use proper security best practices

### Build & Deployment
- Use Angular CLI for development
- Implement proper environment configurations
- Use proper build optimization
- Implement proper deployment strategies
- Use proper CI/CD pipeline
- Implement proper versioning
- Use proper monitoring
- Implement proper error tracking

### Accessibility
- Follow WCAG guidelines
- Implement proper ARIA attributes
- Use proper semantic HTML
- Implement proper keyboard navigation
- Use proper color contrast
- Implement proper screen reader support
- Use proper focus management
- Implement proper accessibility testing 