# Vue.js Frontend Development Guide for AI Assistant

## Project Overview
- **Stack**: Vue.js-based frontend development
- **Purpose**: Standardize AI-assisted code generation for Vue.js frontend applications

## Coding Standards

### Vue.js Style
- Follow Vue.js Style Guide
- Use 2 spaces for indentation
- Use camelCase for variables and methods
- Use PascalCase for components
- Use UPPER_SNAKE_CASE for constants
- Limit line length to 100 characters
- Use descriptive, meaningful names for components and variables
- Follow Vue.js naming conventions for files and folders
- Use TypeScript for type safety
- Use interfaces for type definitions
- Use enums for constant values
- Use readonly for immutable properties

### Project Structure
```
src/
├── assets/            # Static assets
├── components/        # Reusable components
│   ├── common/       # Shared components
│   └── features/     # Feature-specific components
├── composables/       # Composition API functions
├── layouts/          # Layout components
├── pages/            # Page components
├── router/           # Vue Router configuration
├── stores/           # Pinia/Vuex stores
├── types/            # TypeScript type definitions
├── utils/            # Utility functions
├── views/            # View components
├── App.vue           # Root component
└── main.ts           # Application entry point
```

### Best Practices
- Follow Vue.js best practices and patterns
- Use Composition API for new components
- Implement proper error handling
- Use async/await for asynchronous operations
- Use Vue's reactivity system effectively
- Implement proper form validation
- Use v-model for form bindings
- Implement proper state management
- Use Vue Router for navigation
- Follow component composition patterns
- Use proper lifecycle hooks
- Implement proper prop validation

### Vue.js Version
- Use Vue 3 for new projects
- Use Composition API
- Use `<script setup>` syntax
- Use TypeScript for type safety
- Use defineProps and defineEmits
- Use provide/inject for dependency injection
- Use teleport for modal dialogs
- Use suspense for async components

### Component Development
- Follow single responsibility principle
- Use presentational and container components
- Implement proper component communication
- Use proper component lifecycle hooks
- Implement proper error boundaries
- Use proper component styling
- Implement proper accessibility
- Use proper component testing

### State Management
- Use Pinia for state management
- Implement proper store architecture
- Use proper store modules
- Implement proper store actions
- Use proper store mutations
- Implement proper store getters
- Use proper state persistence
- Implement proper store plugins

### Routing
- Use Vue Router for navigation
- Implement proper route guards
- Use proper route meta fields
- Implement proper lazy loading
- Use proper route parameters
- Implement proper route transitions
- Use proper route navigation guards
- Implement proper route events

### Testing
- Use Vitest for unit testing
- Use Vue Test Utils for component testing
- Use Cypress for E2E testing
- Implement proper component testing
- Use proper service testing
- Implement proper store testing
- Use proper router testing
- Implement proper integration testing

### Performance
- Implement proper lazy loading
- Use proper component caching
- Implement proper bundle optimization
- Use proper image optimization
- Implement proper caching strategies
- Use proper code splitting
- Implement proper tree shaking
- Use proper performance monitoring

### Security
- Implement proper XSS protection
- Use proper CSRF protection
- Implement proper authentication
- Use proper authorization
- Implement proper input validation
- Use proper output encoding
- Implement proper security headers
- Use proper security best practices

### Build & Deployment
- Use Vite for development
- Implement proper environment configurations
- Use proper build optimization
- Implement proper deployment strategies
- Use proper CI/CD pipeline
- Implement proper versioning
- Use proper monitoring
- Implement proper error tracking

### Accessibility
- Follow WCAG guidelines
- Implement proper ARIA attributes
- Use proper semantic HTML
- Implement proper keyboard navigation
- Use proper color contrast
- Implement proper screen reader support
- Use proper focus management
- Implement proper accessibility testing
